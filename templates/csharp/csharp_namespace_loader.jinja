{# This is a Jinja2 template for generating a C# data loader class for a namespace. #}
// Auto-generated by Polygen. Do not edit.
using System;
using System.Collections.Generic;
using System.Globalization;
using Polygen.Common;

{% if namespace %}
namespace {{ namespace }};
{% endif %}

public static class {% if namespace %}{{ namespace | pascal_case }}Loader{% else %}GlobalLoader{% endif %}
{
    {% for type_def in loadable_types %}
    /// <summary>
    /// Loads a list of {{ type_def.name }} from the specified data source file.
    /// </summary>
    /// <param name="filePath">The path to the data source file (e.g., a .csv file).</param>
    /// <returns>A list of {{ type_def.name }} instances.</returns>
    public static List<{{ type_def.name }}> Load{{ type_def.name }}(string filePath)
    {
        var reader = DataSourceFactory.CreateReader(filePath);
        var list = new List<{{ type_def.name }}>();

        foreach (var row in reader.ReadRows())
        {
            var instance = new {{ type_def.name }}
            {
{% for struct_item in type_def.items %}
    {% if struct_item.Field %}
    {%- set field = struct_item.Field %}
                {% if field.field_type | map_type(lang) | starts_with("System.Collections.Generic.List<") %}
                {{ field.name }} = DataSourceFactory.ConvertListValue<{{ field.field_type | map_type(lang) | replace("System.Collections.Generic.List<", "") | replace(">", "") }}>(row, "{{ field.name }}"),
                {% else %}
                {{ field.name }} = DataSourceFactory.ConvertSingleValue<{{ field.field_type | map_type(lang) }}>(row, "{{ field.name }}"),
                {% endif %}
    {% endif %}
{% endfor %}
            };
            list.Add(instance);
        }

        return list;
    }
    {% endfor %}
}
