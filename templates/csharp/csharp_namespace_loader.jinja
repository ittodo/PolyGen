{# This is a Jinja2 template for generating a C# data loader class for a namespace. #}
// Auto-generated by Polygen. Do not edit.
using System;
using System.Collections.Generic;
using System.Globalization;
using Polygen.Common;

{% if namespace %}
namespace {{ namespace }};
{% endif %}

public static class {% if namespace %}{{ namespace | pascal_case }}Loader{% else %}GlobalLoader{% endif %}
{
    {% for type_def in loadable_types %}
    /// <summary>
    /// Loads a list of {{ type_def.name }} from the specified data source file.
    /// </summary>
    /// <param name="filePath">The path to the data source file (e.g., a .csv file).</param>
    /// <returns>A list of {{ type_def.name }} instances.</returns>
    public static List<{{ type_def.name }}> Load{{ type_def.name }}(string filePath)
    {
        var reader = DataSourceFactory.CreateReader(filePath);
        var list = new List<{{ type_def.name }}>();

        foreach (var row in reader.ReadRows())
        {
            var instance = new {{ type_def.name }}
            {
{% for struct_item in type_def.items %}
    {% if struct_item.Field %}
    {%- set field = struct_item.Field %}
    {%- set field_type_def = all_struct_defs[field.field_type] if field.field_type in all_struct_defs else none %}
    {%- set is_list = field.field_type | map_type(lang) | starts_with("System.Collections.Generic.List<") %}
    {%- set inner_type_poly = field.field_type | replace("List<", "") | replace(">", "") %} {# e.g., "game.common.Position" #}
    {%- set inner_type_def = all_struct_defs[inner_type_poly] if inner_type_poly in all_struct_defs else none %}
    {%- set is_list_of_embed = is_list and inner_type_def and inner_type_def.is_embed %}

                {% if field_type_def and field_type_def.is_embed %}
                {{ field.name }} = new {{ field.field_type | map_type(lang) }}
                {
{% for embed_struct_item in field_type_def.items %}
    {% if embed_struct_item.Field %}
    {%- set embed_field = embed_struct_item.Field %}
                    {{ embed_field.name }} = DataSourceFactory.ConvertSingleValue<{{ embed_field.field_type | map_type(lang) }}>(row, "{{ field.name }}.{{ embed_field.name }}"),
    {% endif %}
{% endfor %}
                },
                {% elif is_list_of_embed %}
                {{ field.name }} = new System.Collections.Generic.List<{{ inner_type_poly | map_type(lang) }}>(),
                {
                    if (row.TryGetValue("{{ field.name }}", out var rawListValue) && !string.IsNullOrEmpty(rawListValue))
                    {
                        foreach (var itemString in rawListValue.Split(';', StringSplitOptions.RemoveEmptyEntries))
                        {
                            var parts = itemString.Split(',');
                            // Assuming the order of fields in 'parts' matches the order in 'inner_type_def.items'
                            if (parts.Length == {{ inner_type_def.items | selectattr('Field') | list | length }})
                            {
                                var newItem = new {{ inner_type_poly | map_type(lang) }}
                                {
{%- for embed_struct_item in inner_type_def.items %}
    {%- if embed_struct_item.Field %}
    {%- set embed_field = embed_struct_item.Field %}
                                    {{ embed_field.name }} = DataSourceFactory.ConvertValue<{{ embed_field.field_type | map_type(lang) }}>(parts[{{ loop.index0 }}].Trim()),
    {% endif %}
{%- endfor %}
                                };
                                {{ field.name }}.Add(newItem);
                            }
                            else
                            {
                                Console.WriteLine($"Warning: Malformed embed list item for column '{{ field.name }}': '{itemString}'");
                            }
                        }
                    }
                },
                {% else %}
                {{ field.name }} = DataSourceFactory.ConvertSingleValue<{{ field.field_type | map_type(lang) }}>(row, "{{ field.name }}"),
                {% endif %}
    {% endif %}
{% endfor %}
            };
            list.Add(instance);
        }

        return list;
    }
    {% endfor %}
}
