{# C# file generation template. Expects a namespace object `ns` and `lang` in the context. #}
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace {{ ns.name | default("Global.Types") }}
{
{# Loop through all type definitions (structs and enums) in the namespace #}
{%- for type_def in ns.types %}

{%- if type_def.Struct is defined %}
{%- set s = type_def.Struct %}
{%- if s.comment and s.comment | trim %}
    /// <summary>
    /// {{ s.comment | replace("\n", "\n    /// ") }}
    /// </summary>
{%- endif %}
    public partial class {{ s.name }}
    {
{%- for field in s.fields %}
{%- if field.comment and field.comment | trim %}
        /// <summary>
        /// {{ field.comment | replace("\n", "\n        /// ") }}
        /// </summary>
{%- endif %}
{%- for attr in field.attributes %}
        [{{ attr }}]
{%- endfor %}
{#
  [EXAMPLE] Add attributes based on field type.
  This assumes that the `field.field_type` object in the template context
  has properties like `name` (string) and `is_nullable` (bool).
#}
{%- if field.field_type.name == "string" and not field.field_type.is_nullable %}
        [Required]
{%- endif %}
        public {{ field.field_type | map_type(lang) }} {{ field.name | pascal_case }} { get; set; }
{%- if not loop.last %}

{%- endif %}
{%- endfor %}

        /// <summary>
        /// <see cref="{{ s.name }}"/> 클래스의 새 인스턴스를 초기화합니다.
        /// 이 매개변수 없는 생성자는 Entity Framework와 같은 프레임워크에 필요합니다.
        /// </summary>
        public {{ s.name }}()
        {
{#- 컴파일러 경고(CS8618)를 피하기 위해 null을 허용하지 않는 참조 타입을 초기화합니다. #}
{%- for field in s.fields %}
{%- if field.field_type.name == "string" and not field.field_type.is_nullable %}
            {{ field.name | pascal_case }} = string.Empty;
{%- elif field.field_type.is_array %}
            {{ field.name | pascal_case }} = new {{ field.field_type | map_type(lang) }}();
{%- endif %}
{%- endfor %}
        }

{%- if s.fields %}
        /// <summary>
        /// 지정된 값으로 <see cref="{{ s.name }}"/> 클래스의 새 인스턴스를 초기화합니다.
        /// </summary>
{%- for field in s.fields %}
        /// <param name="{{ field.name }}">{{ (field.comment or ("The value for " + field.name + ".")) | replace('\n', ' ') }}</param>
{%- endfor %}
        public {{ s.name }}(
{%- for field in s.fields %}
            {{ field.field_type | map_type(lang) }} {{ field.name }}{% if not loop.last %},{% endif %}
{%- endfor %}
        )
        {
{%- for field in s.fields %}
            this.{{ field.name | pascal_case }} = {{ field.name }};
{%- endfor %}
        }
{%- endif %}
    }
{%- elif type_def.Enum is defined %}
{%- set e = type_def.Enum %}
{%- if e.comment and e.comment | trim %}
    /// <summary>
    /// {{ e.comment | replace("\n", "\n    /// ") }}
    /// </summary>
{%- endif %}
    public enum {{ e.name }}
    {
{%- for member in e.members %}
{%- if member.comment and member.comment | trim %}
        /// <summary>
        /// {{ member.comment | replace("\n", "\n        /// ") }}
        /// </summary>
{%- endif %}
        {{ member.name }},
{%- endfor %}
    }
{%- endif %}
{%- if not loop.last %}

{%- endif %}
{%- endfor %}
}